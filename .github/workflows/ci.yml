---
  name: Build and Deploy Monorepo App
  on:
    push:
      branches: [main]
  # These permissions are needed to interact with GitHub's OIDC Token endpoint.
  permissions:
    id-token: write
    contents: read
  jobs:
    build-and-deploy-api:
      name: Build and deploy NestJS as a Docker image to ECR
      runs-on: ubuntu-24.04-arm  
      steps:  
          - name: Checkout
            uses: actions/checkout@v3

          - name: Install pnpm
            uses: pnpm/action-setup@v4
            
          - name: Setup AWS ECR Details
            uses: aws-actions/configure-aws-credentials@v2
            with:
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws-region: ${{secrets.AWS_REGION}}

          - name: Login to Amazon ECR
            id: login-pf-aws-ecr
            uses: aws-actions/amazon-ecr-login@v2

          - name: Build and push the tagged docker image to Amazon ECR
            env:
              ECR_REGISTRY: ${{ steps.login-pf-aws-ecr.outputs.registry }}
              ECR_REPOSITORY: ${{secrets.AWS_ECR_REPO}}
              IMAGE_TAG: latest
            run: |
              docker compose -f docker-compose.yml build api
              docker tag my-turborepo-api $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
              docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          - name: Deploy new docker image to AWS Lambda
            env:
              ECR_REGISTRY: ${{ steps.login-pf-aws-ecr.outputs.registry }}
              ECR_REPOSITORY: ${{secrets.AWS_ECR_REPO}}
              IMAGE_TAG: latest
            run: |
              aws lambda update-function-code \
                --function-name my-turborepo \
                --image-uri $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    build-and-deploy-web:
      name: Build and deploy Next.js as static files to S3 and CloudFront
      runs-on: ubuntu-latest
  
      env:
        NEXTJS_DIST: apps/web/out
        AWS_REGION: us-east-2
        S3_BUCKET: my-turborepo-web
        CLOUDFRONT_DISTRIBUTION_ID: E2PPDH26TNKYPW
  
      steps:
        - name: Checkout
          uses: actions/checkout@v3

        - name: Install pnpm
          uses: pnpm/action-setup@v4
  
        - name: Configure AWS credentials from AWS account
          uses: aws-actions/configure-aws-credentials@v2
          with:
            role-to-assume: arn:aws:iam::601803819638:role/github-to-aws-oidc
            aws-region: ${{ env.AWS_REGION }}
  
        - name: Install Dependencies
          run: |
            node --version
            pnpm add -g turbo
            turbo prune web
            pnpm install
            
  
        - name: Build Static Website
          run: pnpm run build
  
        - name: Copy files to the production website with the AWS CLI
          run: |
            aws s3 sync --delete ${{ env.NEXTJS_DIST }} s3://${{ env.S3_BUCKET }}
  
        - name: Copy files to the production website with the AWS CLI
          run: |
            aws cloudfront create-invalidation \
              --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
              --paths "/*"